plugins {
    id 'java'
    id 'java-library'
    id "com.github.bjornvester.xjc" version "1.3"
    id "maven-publish"
}

group 'com.arkumbra'
version '1.0.1'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

sourceSets {
    gen {
        java {
            srcDir 'src/gen/java'
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

configurations {
    genCompile.extendsFrom compile
    genRuntime.extendsFrom runtime
}


dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.1'

    // https://mvnrepository.com/artifact/org.springframework/spring-web
    compile group: 'org.springframework', name: 'spring-web', version: '5.2.3.RELEASE'

    // https://mvnrepository.com/artifact/org.mongodb/mongo-java-driver
    compile group: 'org.mongodb', name: 'mongo-java-driver', version: '3.12.1'

    // https://mvnrepository.com/artifact/org.springframework/spring-oxm
    compile group: 'org.springframework', name: 'spring-oxm', version: '5.2.3.RELEASE'

    runtime group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
    runtime group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '2.3.1'
}

jar {
    from {
        configurations.compileClasspath.filter{ it.exists() }.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude {}
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ArkUmbra/quaker")
            credentials {
                username = System.getenv("USERNAME")
                password = System.getenv("PASSWORD")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            groupId = 'com.arkumbra'
            artifactId = 'geotest'
            version = '0.1.0'

            from(components.java)
        }
    }
}


/*
 Run this task to generate java sources from XSD
    https://github.com/bjornvester/xjc-gradle-plugin
 */
xjc {
    xsdDir.set(project.file("$projectDir/src/main/resources/xsd"))
}

